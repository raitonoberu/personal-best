definitions:
  model.AdminCreateUserRequest:
    properties:
      birth_date:
        type: string
      email:
        type: string
      first_name:
        type: string
      is_male:
        type: boolean
      last_name:
        type: string
      middle_name:
        type: string
      password:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      telegram:
        type: string
    required:
    - email
    - first_name
    - last_name
    - middle_name
    - password
    - role_id
    type: object
  model.AdminUpdateUserRequest:
    properties:
      birth_date:
        type: string
      email:
        type: string
      first_name:
        type: string
      is_male:
        type: boolean
      last_name:
        type: string
      middle_name:
        type: string
      password:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      telegram:
        type: string
    type: object
  model.AuthResponse:
    properties:
      id:
        type: integer
      token:
        type: string
    type: object
  model.GetUserResponse:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      middle_name:
        type: string
      player:
        $ref: '#/definitions/model.PlayerResponse'
      role_id:
        type: integer
    type: object
  model.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  model.PlayerResponse:
    properties:
      birth_date:
        type: string
      is_male:
        type: boolean
      phone:
        type: string
      position:
        type: string
      preparation:
        type: string
      telegram:
        type: string
    type: object
  model.RegisterRequest:
    properties:
      birth_date:
        type: string
      email:
        type: string
      first_name:
        type: string
      is_male:
        type: boolean
      last_name:
        type: string
      middle_name:
        type: string
      password:
        type: string
      phone:
        type: string
      telegram:
        description: 'TODO: more validations'
        type: string
    required:
    - birth_date
    - email
    - first_name
    - is_male
    - last_name
    - middle_name
    - password
    - phone
    - telegram
    type: object
  model.RoleResponse:
    properties:
      can_create:
        type: boolean
      can_participate:
        type: boolean
      can_view:
        type: boolean
      id:
        type: integer
      is_admin:
        type: boolean
      is_free:
        type: boolean
      name:
        type: string
    type: object
  model.UpdateUserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      middle_name:
        type: string
      password:
        type: string
    type: object
info:
  contact:
    email: raitonoberu@mail.ru
    name: raitonoberu
    url: http://raitonobe.ru
  description: neмытьlE yблюdki
  title: Personal Best API
  version: "0.1"
paths:
  /api/admin/users:
    post:
      consumes:
      - application/json
      description: |-
        Create new user with desired params.
        Player-related params only required when creating player
        (is_male, phone, telegram, birth_date).
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AdminCreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthResponse'
      security:
      - Bearer: []
      summary: Create user
      tags:
      - admin
  /api/admin/users/{id}:
    patch:
      consumes:
      - application/json
      description: |-
        Update user.
        Player-related params only changed when updating player
        (is_male, phone, telegram, birth_date).
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AdminUpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Update user
      tags:
      - admin
  /api/login:
    post:
      consumes:
      - application/json
      description: Login user, return JWT token & ID
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthResponse'
      summary: Login user
      tags:
      - auth
  /api/register:
    post:
      consumes:
      - application/json
      description: |-
        Register new unverified player
        "birth_date" must have format 1889-04-20
        "phone" must start with +
        "telegram" must start with @
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthResponse'
      summary: Register user
      tags:
      - auth
  /api/roles:
    get:
      description: List all available roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RoleResponse'
            type: array
      security:
      - Bearer: []
      summary: List roles
      tags:
      - roles
  /api/users:
    delete:
      description: Delete current user
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Delete user
      tags:
      - user
    patch:
      description: |-
        Update user info.
        Player fields will be added later.
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserRequest'
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Update user
      tags:
      - user
  /api/users/{id}:
    get:
      description: |-
        Return single user by ID
        "player" may not be present (trainer / admin)
        player.preparation, player.position may not be present
      parameters:
      - in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetUserResponse'
      security:
      - Bearer: []
      summary: Get user
      tags:
      - user
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
