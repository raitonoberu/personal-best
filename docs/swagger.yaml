definitions:
  model.AdminCreateUserRequest:
    properties:
      birth_date:
        type: string
      email:
        type: string
      first_name:
        type: string
      is_male:
        type: boolean
      last_name:
        type: string
      middle_name:
        type: string
      password:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      telegram:
        type: string
    required:
    - email
    - first_name
    - last_name
    - middle_name
    - password
    - role_id
    type: object
  model.AdminUpdateUserRequest:
    properties:
      birth_date:
        type: string
      email:
        type: string
      first_name:
        type: string
      is_male:
        type: boolean
      last_name:
        type: string
      middle_name:
        type: string
      password:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      telegram:
        type: string
    type: object
  model.AuthResponse:
    properties:
      id:
        type: integer
      token:
        type: string
    type: object
  model.CompetitionDay:
    properties:
      date:
        type: string
      end_time:
        type: string
      start_time:
        type: string
    required:
    - date
    - end_time
    - start_time
    type: object
  model.CompetitionRegistration:
    properties:
      is_approved:
        type: boolean
      is_dropped:
        type: boolean
      user:
        $ref: '#/definitions/model.GetUserResponse'
    type: object
  model.CreateCompetitionRequest:
    properties:
      age:
        type: integer
      closes_at:
        type: string
      days:
        items:
          $ref: '#/definitions/model.CompetitionDay'
        type: array
      description:
        type: string
      name:
        type: string
      size:
        type: integer
      tours:
        type: integer
    required:
    - age
    - closes_at
    - days
    - description
    - name
    - size
    - tours
    type: object
  model.CreateCompetitionResponse:
    properties:
      id:
        type: integer
    type: object
  model.Document:
    properties:
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  model.GetCompetitionResponse:
    properties:
      age:
        type: integer
      closes_at:
        type: string
      days:
        items:
          $ref: '#/definitions/model.CompetitionDay'
        type: array
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      size:
        type: integer
      tours:
        type: integer
      trainer:
        $ref: '#/definitions/model.GetUserResponse'
    type: object
  model.GetDocumentResponse:
    properties:
      url:
        type: string
    type: object
  model.GetUserResponse:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      middle_name:
        type: string
      player:
        $ref: '#/definitions/model.PlayerResponse'
      role_id:
        type: integer
    type: object
  model.ListCompetitionsResponse:
    properties:
      competitions:
        items:
          $ref: '#/definitions/model.GetCompetitionResponse'
        type: array
      count:
        type: integer
      total:
        type: integer
    type: object
  model.ListMatchesResponse:
    properties:
      count:
        type: integer
      matches:
        items:
          $ref: '#/definitions/model.Match'
        type: array
      total:
        type: integer
    type: object
  model.ListPlayerRegistrationsResponse:
    properties:
      count:
        type: integer
      registrations:
        items:
          $ref: '#/definitions/model.PlayerRegistration'
        type: array
      total:
        type: integer
    type: object
  model.ListUsersResponse:
    properties:
      count:
        type: integer
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/model.GetUserResponse'
        type: array
    type: object
  model.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  model.Match:
    properties:
      id:
        type: integer
      left_score:
        type: integer
      left_team:
        items:
          $ref: '#/definitions/model.MatchPlayer'
        type: array
      right_score:
        type: integer
      right_team:
        items:
          $ref: '#/definitions/model.MatchPlayer'
        type: array
      start_time:
        type: string
    type: object
  model.MatchPlayer:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  model.PlayerRegistration:
    properties:
      competition:
        $ref: '#/definitions/model.GetCompetitionResponse'
      is_approved:
        type: boolean
      is_dropped:
        type: boolean
    type: object
  model.PlayerResponse:
    properties:
      birth_date:
        type: string
      is_male:
        type: boolean
      phone:
        type: string
      position:
        type: string
      preparation:
        type: string
      telegram:
        type: string
    type: object
  model.RegisterRequest:
    properties:
      birth_date:
        type: string
      email:
        type: string
      first_name:
        type: string
      is_male:
        type: boolean
      last_name:
        type: string
      middle_name:
        type: string
      password:
        type: string
      phone:
        type: string
      telegram:
        description: 'TODO: more validations'
        type: string
    required:
    - birth_date
    - email
    - first_name
    - is_male
    - last_name
    - middle_name
    - password
    - phone
    - telegram
    type: object
  model.RoleResponse:
    properties:
      can_create:
        type: boolean
      can_participate:
        type: boolean
      can_view:
        type: boolean
      id:
        type: integer
      is_admin:
        type: boolean
      is_free:
        type: boolean
      name:
        type: string
    type: object
  model.UpdateCompetitionRequest:
    properties:
      closes_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    required:
    - id
    type: object
  model.UpdateMatchRequest:
    properties:
      left_score:
        type: integer
      right_score:
        type: integer
    type: object
  model.UpdateRegistrationRequest:
    properties:
      is_approved:
        type: boolean
      is_dropped:
        type: boolean
    type: object
  model.UpdateUserRequest:
    properties:
      birth_date:
        type: string
      email:
        type: string
      first_name:
        type: string
      is_male:
        type: boolean
      last_name:
        type: string
      middle_name:
        type: string
      password:
        type: string
      phone:
        type: string
      telegram:
        type: string
    type: object
info:
  contact:
    email: raitonoberu@mail.ru
    name: raitonoberu
    url: http://raitonobe.ru
  description: neмытьlE yблюdki
  title: Personal Best API
  version: "0.1"
paths:
  /api/competitions:
    get:
      description: |-
        List all competitions from new to old
        For now there is no way to get start/end but im working on it :)
      parameters:
      - default: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListCompetitionsResponse'
      security:
      - Bearer: []
      summary: List competition
      tags:
      - competition
    post:
      consumes:
      - application/json
      description: |-
        Create new competition.
        Days must be different (no same day twice).
        Time must be in format HH:MM.
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateCompetitionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.CreateCompetitionResponse'
      security:
      - Bearer: []
      summary: Create competition
      tags:
      - competition
  /api/competitions/{comp_id}/matches/{id}:
    patch:
      description: |-
        Update match score
        Match must have players & score must NOT be set already
        This will fill next match's players
      parameters:
      - description: comp_id
        in: path
        name: comp_id
        required: true
        type: integer
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateMatchRequest'
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Update match
      tags:
      - match
  /api/competitions/{comp_id}/registrations/{player_id}:
    patch:
      description: |-
        This is made for trainers/admins
        Here you can approve or drop players
      parameters:
      - description: player_id
        in: path
        name: player_id
        required: true
        type: integer
      - description: comp_id
        in: path
        name: comp_id
        required: true
        type: integer
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateRegistrationRequest'
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Update registration
      tags:
      - registration
  /api/competitions/{id}:
    delete:
      parameters:
      - description: id of competition
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Delete competition
      tags:
      - competition
    get:
      description: Return competition by ID
      parameters:
      - in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetCompetitionResponse'
      security:
      - Bearer: []
      summary: Get competition
      tags:
      - competition
    patch:
      parameters:
      - description: comp id
        in: path
        name: id
        required: true
        type: integer
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateCompetitionRequest'
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Update competition
      tags:
      - competition
  /api/competitions/{id}/matches:
    get:
      description: List all matches with all players
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: integer
      - default: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListMatchesResponse'
      security:
      - Bearer: []
      summary: List competition matches
      tags:
      - match
  /api/competitions/{id}/registrations:
    delete:
      description: Competition must not be closed yet
      parameters:
      - in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Unregister for competition
      tags:
      - registration
    get:
      description: List registrations for competition
      parameters:
      - in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.CompetitionRegistration'
            type: array
      security:
      - Bearer: []
      summary: List competition registrations
      tags:
      - registration
    post:
      description: Competition must not be closed yet
      parameters:
      - in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Register for competition
      tags:
      - registration
  /api/documents:
    post:
      consumes:
      - multipart/form-data
      description: |-
        Save player document. Max file size is 10MB
        File can be one of:
        jpeg, png, webp, gif, pdf
      parameters:
      - description: document
        in: formData
        name: document
        required: true
        type: file
      - description: name
        in: formData
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Save document
      tags:
      - document
  /api/documents/{id}:
    delete:
      description: What do you think it does?
      parameters:
      - description: id of document
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Delete document
      tags:
      - document
    get:
      description: Get URL of document
      parameters:
      - description: id of document
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetDocumentResponse'
      security:
      - Bearer: []
      summary: Get document
      tags:
      - document
  /api/login:
    post:
      consumes:
      - application/json
      description: Login user, return JWT token & ID
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthResponse'
      summary: Login user
      tags:
      - auth
  /api/register:
    post:
      consumes:
      - application/json
      description: |-
        Register new unverified player
        "birth_date" must have format 1889-04-20
        "phone" must start with +
        "telegram" must start with @
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.AuthResponse'
      summary: Register user
      tags:
      - auth
  /api/roles:
    get:
      description: List all available roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RoleResponse'
            type: array
      security:
      - Bearer: []
      summary: List roles
      tags:
      - roles
  /api/users:
    delete:
      description: Delete current user
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Delete user
      tags:
      - user
    get:
      description: |-
        List users with specified role.
        Can be used for checking players before approving.
      parameters:
      - default: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: offset
        type: integer
      - default: 3
        in: query
        minimum: 1
        name: role_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListUsersResponse'
      security:
      - Bearer: []
      summary: List users
      tags:
      - admin
    patch:
      description: |-
        Update user info.
        Player fields will be added later.
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserRequest'
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Update user
      tags:
      - user
    post:
      consumes:
      - application/json
      description: |-
        Create new user with desired params.
        Player-related params only required when creating player
        (is_male, phone, telegram, birth_date).
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AdminCreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.AuthResponse'
      security:
      - Bearer: []
      summary: Create user
      tags:
      - admin
  /api/users/{id}:
    delete:
      description: Delete user by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Delete user
      tags:
      - admin
    get:
      description: |-
        Return single user by ID
        "player" may not be present (trainer / admin)
        player.preparation, player.position may not be present
      parameters:
      - in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetUserResponse'
      security:
      - Bearer: []
      summary: Get user
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: |-
        Update user.
        Player-related params only changed when updating player
        (is_male, phone, telegram, birth_date).
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AdminUpdateUserRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Update user
      tags:
      - admin
  /api/users/{user_id}/documents:
    get:
      description: List documents of player
      parameters:
      - description: id of user
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Document'
            type: array
      security:
      - Bearer: []
      summary: List player documents
      tags:
      - document
  /api/users/{user_id}/registrations:
    get:
      description: List competitions where player is registered
      parameters:
      - description: id of user
        in: path
        name: user_id
        required: true
        type: integer
      - default: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListPlayerRegistrationsResponse'
      security:
      - Bearer: []
      summary: List player registrations
      tags:
      - registration
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
