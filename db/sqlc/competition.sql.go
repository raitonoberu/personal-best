// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: competition.sql

package sqlc

import (
	"context"
	"time"
)

const createCompetition = `-- name: CreateCompetition :one
INSERT INTO
    competitions (trainer_id, name, description, start_date, tours, age, size, closes_at)
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, trainer_id, name, description, start_date, tours, age, size, closes_at, created_at
`

type CreateCompetitionParams struct {
	TrainerID   int64
	Name        string
	Description string
	StartDate   time.Time
	Tours       int64
	Age         int64
	Size        int64
	ClosesAt    time.Time
}

func (q *Queries) CreateCompetition(ctx context.Context, arg CreateCompetitionParams) (Competition, error) {
	row := q.db.QueryRowContext(ctx, createCompetition,
		arg.TrainerID,
		arg.Name,
		arg.Description,
		arg.StartDate,
		arg.Tours,
		arg.Age,
		arg.Size,
		arg.ClosesAt,
	)
	var i Competition
	err := row.Scan(
		&i.ID,
		&i.TrainerID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.Tours,
		&i.Age,
		&i.Size,
		&i.ClosesAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCompetition = `-- name: DeleteCompetition :exec
DELETE FROM
    competitions
WHERE
    id = ?
`

func (q *Queries) DeleteCompetition(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCompetition, id)
	return err
}

const getCompetition = `-- name: GetCompetition :one
SELECT
    users.id, users.role_id, users.email, users.password, users.first_name, users.last_name, users.middle_name, users.created_at,
    competitions.id, competitions.trainer_id, competitions.name, competitions.description, competitions.start_date, competitions.tours, competitions.age, competitions.size, competitions.closes_at, competitions.created_at,
    competition_days.competition_id, competition_days.date, competition_days.start_time, competition_days.end_time
FROM
    competitions
    JOIN users ON users.id = competitions.trainer_id
    JOIN competition_days ON competition_id = competitions.id
WHERE
    competitions.id = ?
LIMIT
    1
`

type GetCompetitionRow struct {
	User           User
	Competition    Competition
	CompetitionDay CompetitionDay
}

func (q *Queries) GetCompetition(ctx context.Context, id int64) (GetCompetitionRow, error) {
	row := q.db.QueryRowContext(ctx, getCompetition, id)
	var i GetCompetitionRow
	err := row.Scan(
		&i.User.ID,
		&i.User.RoleID,
		&i.User.Email,
		&i.User.Password,
		&i.User.FirstName,
		&i.User.LastName,
		&i.User.MiddleName,
		&i.User.CreatedAt,
		&i.Competition.ID,
		&i.Competition.TrainerID,
		&i.Competition.Name,
		&i.Competition.Description,
		&i.Competition.StartDate,
		&i.Competition.Tours,
		&i.Competition.Age,
		&i.Competition.Size,
		&i.Competition.ClosesAt,
		&i.Competition.CreatedAt,
		&i.CompetitionDay.CompetitionID,
		&i.CompetitionDay.Date,
		&i.CompetitionDay.StartTime,
		&i.CompetitionDay.EndTime,
	)
	return i, err
}

const listCompetitions = `-- name: ListCompetitions :many
SELECT
    users.id, users.role_id, users.email, users.password, users.first_name, users.last_name, users.middle_name, users.created_at,
    competitions.id, competitions.trainer_id, competitions.name, competitions.description, competitions.start_date, competitions.tours, competitions.age, competitions.size, competitions.closes_at, competitions.created_at,
    COUNT() OVER() as total
FROM
    competitions
    JOIN users ON users.id = competitions.trainer_id
LIMIT
    ? OFFSET ?
`

type ListCompetitionsParams struct {
	Limit  int64
	Offset int64
}

type ListCompetitionsRow struct {
	User        User
	Competition Competition
	Total       int64
}

func (q *Queries) ListCompetitions(ctx context.Context, arg ListCompetitionsParams) ([]ListCompetitionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listCompetitions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCompetitionsRow
	for rows.Next() {
		var i ListCompetitionsRow
		if err := rows.Scan(
			&i.User.ID,
			&i.User.RoleID,
			&i.User.Email,
			&i.User.Password,
			&i.User.FirstName,
			&i.User.LastName,
			&i.User.MiddleName,
			&i.User.CreatedAt,
			&i.Competition.ID,
			&i.Competition.TrainerID,
			&i.Competition.Name,
			&i.Competition.Description,
			&i.Competition.StartDate,
			&i.Competition.Tours,
			&i.Competition.Age,
			&i.Competition.Size,
			&i.Competition.ClosesAt,
			&i.Competition.CreatedAt,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompetitionsByTrainer = `-- name: ListCompetitionsByTrainer :many
SELECT
    id, trainer_id, name, description, start_date, tours, age, size, closes_at, created_at
FROM
    competitions
WHERE
    trainer_id = ?
LIMIT
    ? OFFSET ?
`

type ListCompetitionsByTrainerParams struct {
	TrainerID int64
	Limit     int64
	Offset    int64
}

func (q *Queries) ListCompetitionsByTrainer(ctx context.Context, arg ListCompetitionsByTrainerParams) ([]Competition, error) {
	rows, err := q.db.QueryContext(ctx, listCompetitionsByTrainer, arg.TrainerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Competition
	for rows.Next() {
		var i Competition
		if err := rows.Scan(
			&i.ID,
			&i.TrainerID,
			&i.Name,
			&i.Description,
			&i.StartDate,
			&i.Tours,
			&i.Age,
			&i.Size,
			&i.ClosesAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompetition = `-- name: UpdateCompetition :exec
UPDATE
    competitions
SET
    name = coalesce(?1, name),
    description = coalesce(?2, description),
    closes_at = coalesce(?3, closes_at)
    -- more?
WHERE
    id = ?4
`

type UpdateCompetitionParams struct {
	Name        *string
	Description *string
	ClosesAt    *time.Time
	ID          int64
}

func (q *Queries) UpdateCompetition(ctx context.Context, arg UpdateCompetitionParams) error {
	_, err := q.db.ExecContext(ctx, updateCompetition,
		arg.Name,
		arg.Description,
		arg.ClosesAt,
		arg.ID,
	)
	return err
}
