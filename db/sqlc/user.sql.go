// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package sqlc

import (
	"context"
	"time"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO
    players (user_id, birth_date, is_male, phone, telegram, preparation, position)
VALUES
    (?, ?, ?, ?, ?, ?, ?)
RETURNING user_id, birth_date, is_male, phone, telegram, preparation, position
`

type CreatePlayerParams struct {
	UserID      int64
	BirthDate   time.Time
	IsMale      bool
	Phone       string
	Telegram    string
	Preparation string
	Position    string
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, createPlayer,
		arg.UserID,
		arg.BirthDate,
		arg.IsMale,
		arg.Phone,
		arg.Telegram,
		arg.Preparation,
		arg.Position,
	)
	var i Player
	err := row.Scan(
		&i.UserID,
		&i.BirthDate,
		&i.IsMale,
		&i.Phone,
		&i.Telegram,
		&i.Preparation,
		&i.Position,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (role_id, email, password, first_name, last_name, middle_name)
VALUES
    (?, ?, ?, ?, ?, ?)
RETURNING id, role_id, email, password, first_name, last_name, middle_name, created_at
`

type CreateUserParams struct {
	RoleID     int64
	Email      string
	Password   string
	FirstName  string
	LastName   string
	MiddleName string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.RoleID,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.MiddleName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM
    users
WHERE
    id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
    users.id, users.role_id, users.email, users.password, users.first_name, users.last_name, users.middle_name, users.created_at, user_players.user_id, user_players.birth_date, user_players.is_male, user_players.phone, user_players.telegram, user_players.preparation, user_players.position
FROM
    users
LEFT JOIN
    user_players ON users.id = user_players.user_id
WHERE
    users.id = ?
LIMIT
    1
`

type GetUserRow struct {
	User       User
	UserPlayer UserPlayer
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.User.ID,
		&i.User.RoleID,
		&i.User.Email,
		&i.User.Password,
		&i.User.FirstName,
		&i.User.LastName,
		&i.User.MiddleName,
		&i.User.CreatedAt,
		&i.UserPlayer.UserID,
		&i.UserPlayer.BirthDate,
		&i.UserPlayer.IsMale,
		&i.UserPlayer.Phone,
		&i.UserPlayer.Telegram,
		&i.UserPlayer.Preparation,
		&i.UserPlayer.Position,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    id, role_id, email, password, first_name, last_name, middle_name, created_at
FROM
    users
WHERE
    email = ?
LIMIT
    1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
    users.id, users.role_id, users.email, users.password, users.first_name, users.last_name, users.middle_name, users.created_at, user_players.user_id, user_players.birth_date, user_players.is_male, user_players.phone, user_players.telegram, user_players.preparation, user_players.position,
    COUNT() OVER() as total
FROM
    users
LEFT JOIN
    user_players ON users.id = user_players.user_id
WHERE
    role_id = ?
LIMIT
    ? OFFSET ?
`

type ListUsersParams struct {
	RoleID int64
	Limit  int64
	Offset int64
}

type ListUsersRow struct {
	User       User
	UserPlayer UserPlayer
	Total      int64
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.RoleID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.User.ID,
			&i.User.RoleID,
			&i.User.Email,
			&i.User.Password,
			&i.User.FirstName,
			&i.User.LastName,
			&i.User.MiddleName,
			&i.User.CreatedAt,
			&i.UserPlayer.UserID,
			&i.UserPlayer.BirthDate,
			&i.UserPlayer.IsMale,
			&i.UserPlayer.Phone,
			&i.UserPlayer.Telegram,
			&i.UserPlayer.Preparation,
			&i.UserPlayer.Position,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayer = `-- name: UpdatePlayer :exec
UPDATE
    players
SET
    birth_date = coalesce(?1, birth_date),
    is_male = coalesce(?2, is_male),
    phone = coalesce(?3, phone),
    telegram = coalesce(?4, telegram),
    preparation = coalesce(?5, preparation),
    position = coalesce(?6, position)
WHERE
    user_id = ?7
`

type UpdatePlayerParams struct {
	BirthDate   *time.Time
	IsMale      *bool
	Phone       *string
	Telegram    *string
	Preparation *string
	Position    *string
	UserID      int64
}

func (q *Queries) UpdatePlayer(ctx context.Context, arg UpdatePlayerParams) error {
	_, err := q.db.ExecContext(ctx, updatePlayer,
		arg.BirthDate,
		arg.IsMale,
		arg.Phone,
		arg.Telegram,
		arg.Preparation,
		arg.Position,
		arg.UserID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE
    users
SET
    role_id = coalesce(?1, role_id),
    email = coalesce(?2, email),
    password = coalesce(?3, password),
    first_name = coalesce(?4, first_name),
    last_name = coalesce(?5, last_name),
    middle_name = coalesce(?6, middle_name)
WHERE
    id = ?7
`

type UpdateUserParams struct {
	RoleID     *int64
	Email      *string
	Password   *string
	FirstName  *string
	LastName   *string
	MiddleName *string
	ID         int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.RoleID,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.MiddleName,
		arg.ID,
	)
	return err
}
