// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package sqlc

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (name, email, password, is_trainer, birth_date)
VALUES
    (?, ?, ?, ?, ?) RETURNING id, name, email, password, is_trainer, birth_date
`

type CreateUserParams struct {
	Name      string
	Email     string
	Password  string
	IsTrainer bool
	BirthDate *time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.IsTrainer,
		arg.BirthDate,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsTrainer,
		&i.BirthDate,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM
    users
WHERE
    id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
    id, name, email, password, is_trainer, birth_date
FROM
    users
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsTrainer,
		&i.BirthDate,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    id, name, email, password, is_trainer, birth_date
FROM
    users
WHERE
    email = ?
LIMIT
    1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsTrainer,
		&i.BirthDate,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
    users.id, users.name, users.email, users.password, users.is_trainer, users.birth_date,
    COUNT() OVER() as total
FROM
    users
LIMIT
    ? OFFSET ?
`

type ListUsersParams struct {
	Limit  int64
	Offset int64
}

type ListUsersRow struct {
	User  User
	Total int64
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.User.ID,
			&i.User.Name,
			&i.User.Email,
			&i.User.Password,
			&i.User.IsTrainer,
			&i.User.BirthDate,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE
    users
SET
    name = coalesce(?1, name),
    email = coalesce(?2, email),
    password = coalesce(?3, password)
WHERE
    id = ?4
`

type UpdateUserParams struct {
	Name     *string
	Email    *string
	Password *string
	ID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.ID,
	)
	return err
}
